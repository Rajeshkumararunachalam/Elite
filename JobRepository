using Elite_HR.Database;
using Elite_HR.Helper;
using Elite_HR.Interface;
using Elite_HR.Model;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Elite_HR.Repository
{
    public class JobRepository :IJobInterface
    {
        private readonly EliteHRDbContext  _dbContext;
        public JobRepository(EliteHRDbContext dbContext)
        {
            _dbContext = dbContext;
        }
        public RetObj AddJob(JobModel job)
        {
              try
               {
                   var existingid = _dbContext.elite_employer.FirstOrDefault(x => x.EmployerId == job.EmployerId);
                   if (existingid == null)
                   {
                      return new RetObj { Success = false };
                   }
                   if (job.JobId != 0)
                   {
                     var existingjob = _dbContext.elite_jobs.SingleOrDefault(x => x.JobId == job.JobId);
                     if (existingjob == null)
                     {
                        return new RetObj { Success = false, ErrorNote = "Enter valid id" };
                     }
                     existingjob.EmployerId = job.EmployerId;
                     existingjob.JobTitle = job.JobTitle;
                     existingjob.EmployeeType = job.EmployeeType;
                     existingjob.Destination = job.Destination;
                     existingjob.JobType = job.JobType;
                     existingjob.Experience = job.Experience;
                     existingjob.Qualification = job.Qualification;
                     existingjob.Gender = job.Gender;
                     existingjob.JobTags = job.JobTags;
                     existingjob.Industry = job.Industry;
                     existingjob.SkillsRequirements = job.SkillsRequirements;
                     existingjob.No_Of_Vacancy = job.No_Of_Vacancy;
                     existingjob.MinimumSalary = job.MinimumSalary;
                     existingjob.MaximumSalary = job.MaximumSalary;
                     existingjob.ApplicationEndDate = DateTime.Now.AddDays(30);
                     existingjob.Description = job.Description;
                     existingjob.CompanyName = existingid.CompanyName;
                     existingjob.CompanyAddress = existingid.CompanyAddress;
                     existingjob.CompanyMobileNo = existingid.CompanyMobileNo;
                     existingjob.CompanyEmail = existingid.CompanyEmail;

                    _dbContext.SaveChanges();

                      var retObj = new RetObj
                      {
                        Success = true,
                        ErrorNote = $"the id {job.JobId} is updated successfully"
                      };
                      return retObj;
                   }
                   else
                   {
                     var newJob = new JobModel
                     {
                       JobId=job.JobId,
                       EmployerId = job.EmployerId,
                       JobTitle=job.JobTitle,
                       EmployeeType=job.EmployeeType,
                       Destination = job.Destination,
                       JobType = job.JobType,
                       Experience = job.Experience,
                       Qualification = job.Qualification,
                       Gender = job.Gender,
                       JobTags = job.JobTags,
                       Industry = job.Industry,
                       SkillsRequirements = job.SkillsRequirements,
                       No_Of_Vacancy = job.No_Of_Vacancy,
                       MinimumSalary = job.MinimumSalary,
                       MaximumSalary = job.MaximumSalary,
                       ApplicationEndDate =DateTime.Now.AddDays(30),
                       Description = job.Description,
                       CompanyName = existingid.CompanyName,
                       CompanyAddress = existingid.CompanyAddress,
                       CompanyMobileNo = existingid.CompanyMobileNo,
                       CompanyEmail = existingid.CompanyEmail
                     };

                     _dbContext.elite_jobs.Add(newJob);
                     _dbContext.SaveChanges();
   
                      var retObj = new RetObj
                      {
                        JOB = newJob,
                        Success = true,
                        ErrorNote = "Inserted successfully"
                      };
                      return retObj;
                   }
              }
              catch (Exception e)
              {
                throw e;
              }
        } 
        public async Task<List<JobModel>> GetAllJobs()
        {
            List<JobModel> jobModel = await (from c in _dbContext.elite_jobs
                                                        select new JobModel
                                                        {
                                                            JobId=c.JobId,
                                                            EmployerId = c.EmployerId,
                                                            JobTitle=c.JobTitle,
                                                            EmployeeType=c.EmployeeType,
                                                            Destination = c.Destination,
                                                            JobType = c.JobType,
                                                            Experience = c.Experience,
                                                            Qualification = c.Qualification,
                                                            Gender = c.Gender,
                                                            JobTags = c.JobTags,
                                                            Industry = c.Industry,
                                                            SkillsRequirements = c.SkillsRequirements,
                                                            No_Of_Vacancy = c.No_Of_Vacancy,
                                                            MinimumSalary = c.MinimumSalary,
                                                            MaximumSalary = c.MaximumSalary,
                                                            ApplicationEndDate = c.ApplicationEndDate,
                                                            Description = c.Description,
                                                            CompanyName = c.CompanyName,
                                                            CompanyAddress = c.CompanyAddress,
                                                            CompanyMobileNo = c.CompanyMobileNo,
                                                            CompanyEmail = c.CompanyEmail,
                                                        }).ToListAsync();
            return jobModel;
        }
        public async Task<JobModel> GetByIdJobs(int jobid)
        {
            JobModel jobModel = await (from c in _dbContext.elite_jobs
                                                  where c.JobId == jobid
                                                  select new JobModel
                                                  {
                                                      JobId=c.JobId,
                                                      EmployerId = c.EmployerId,
                                                      JobTitle = c.JobTitle,
                                                      EmployeeType = c.EmployeeType,
                                                      Destination = c.Destination,
                                                      JobType = c.JobType,
                                                      Experience = c.Experience,
                                                      Qualification = c.Qualification,
                                                      Gender = c.Gender,
                                                      JobTags = c.JobTags,
                                                      Industry = c.Industry,
                                                      SkillsRequirements = c.SkillsRequirements,
                                                      No_Of_Vacancy = c.No_Of_Vacancy,
                                                      MinimumSalary = c.MinimumSalary,
                                                      MaximumSalary = c.MaximumSalary,
                                                      ApplicationEndDate = c.ApplicationEndDate,
                                                      Description = c.Description,
                                                      CompanyName = c.CompanyName,
                                                      CompanyAddress = c.CompanyAddress,
                                                      CompanyMobileNo = c.CompanyMobileNo,
                                                      CompanyEmail = c.CompanyEmail
                                                  }).FirstOrDefaultAsync();
            return jobModel;
        }
        public async Task<List<JobModel>> GetByEmployerID(int employerid)
        {
            List<JobModel> employer = await (from c in _dbContext.elite_jobs
                                            where employerid == c.EmployerId
                                            select new JobModel
                                            {
                                                JobId = c.JobId,
                                                EmployerId = c.EmployerId,
                                                Destination = c.Destination,
                                                JobType = c.JobType,
                                                Experience = c.Experience,
                                                Qualification = c.Qualification,
                                                Gender = c.Gender,
                                                JobTags = c.JobTags,
                                                Industry = c.Industry,
                                                SkillsRequirements = c.SkillsRequirements,
                                                No_Of_Vacancy = c.No_Of_Vacancy,
                                                MinimumSalary = c.MinimumSalary,
                                                MaximumSalary = c.MaximumSalary,
                                                ApplicationEndDate = c.ApplicationEndDate,
                                                Description = c.Description,
                                                CompanyName = c.CompanyName,
                                                CompanyAddress = c.CompanyAddress,
                                                CompanyMobileNo = c.CompanyMobileNo,
                                                CompanyEmail = c.CompanyEmail
                                            }).ToListAsync();
            return employer;
        }
        public RetObj DeleteByIdJobs(int jobid)
        {
            RetObj retobj = new RetObj();
            JobModel jobModel = _dbContext.elite_jobs.SingleOrDefault(x => x.JobId == jobid);
            if (jobModel != null)
            {
                _dbContext.elite_jobs.Remove(jobModel);
                _dbContext.SaveChanges();

                retobj.JOB = jobModel;
                retobj.Success = true;
                retobj.ErrorNote = $"entered id {jobModel.JobId} is deleted successfully";
            }
            else
            {
                retobj.Success = false;
                retobj.ErrorNote = "enterd details is wrong";
            }
            return retobj;
        }
    }
}

